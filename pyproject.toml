[build-system]
requires = ["setuptools>=48", "setuptools_scm[toml]>=6.3.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[project]
name = "pytest-servers"
description = "pytest servers"
readme = "README.rst"
license = {text = "Apache-2.0"}
authors = [{ name = "Iterative", email = "support@dvc.org" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 3 - Alpha",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
]
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = [
    "pytest>=6.2",
    "requests",
    "fsspec",
    "universal-pathlib==0.0.21",
    "filelock>=3.3.2",
]

[project.entry-points.pytest11]
pytest-servers = "pytest_servers.fixtures"

[project.urls]
Issues = "https://github.com/iterative/pytest-servers/issues"
Source = "https://github.com/iterative/pytest-servers"

[project.optional-dependencies]
docker = ["docker>6"]
s3 = [
    "moto[server]>=4",
    "s3fs[boto3]>=2022.02.0",
    "botocore>=1.31.17", # Temporary: explicitly define this to avoid pip backtracking while installing moto[server]
]
azure = [
    "adlfs>=2022.02.22",
    "pytest-servers[docker]",
]
gcs = [
    "gcsfs>=2022.02.22",
    "pytest-servers[docker]",
]
all = ["pytest-servers[s3,azure,gcs]"]
tests = [
    # see https://github.com/nedbat/coveragepy/issues/1341#issuecomment-1228942657
    "coverage-enable-subprocess",
    "coverage[toml]>6",
    "pytest-sugar==0.9.7",
    "pytest-xdist==3.0.2",
    "mypy==1.7.1",
    "types-requests",
]
dev = [
    "pytest-servers[all]",
    "pytest-servers[tests]",
]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.pytest.ini_options]
addopts = "-ra -n=auto"

[tool.coverage.run]
branch = true
parallel = true
concurrency = ["multiprocessing", "thread"]
source = ["pytest_servers", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
ignore_missing_imports = true
files = ["src", "tests"]

[tool.codespell]
ignore-words-list = " "

[tool.ruff]
ignore = [
    "S101", # assert
    "PLR2004", # magic-value-comparison
    "PLW2901", # redefined-loop-name
    "ISC001", # single-line-implicit-string-concatenation
    "SIM105", # suppressible-exception
    "SIM108", # if-else-block-instead-of-if-exp
]
select = ["ALL"]
show-source = true
show-fixes = true

[tool.ruff.per-file-ignores]
"noxfile.py" = ["D", "PTH"]
"tests/**" = ["S", "ARG001", "ARG002", "ANN"]
"docs/**" = ["INP"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
known-first-party = ["pytest_servers"]
